name: "test-on-comment"

on:
  issue_comment:

concurrency:
  group: ${{ github.ref }}-${{ github.event.issue.number }}-${{ contains(github.event.comment.body, '/run-tests') }}-comment
  cancel-in-progress: true

env:
  GH_TOKEN_BANK_ADMIN: ${{ secrets.GH_TOKEN_BANK_ADMIN }}
  FORCE_COLOR: true

permissions: write-all

jobs:
  check-tests:
    name: Check comment
    if: ${{ (github.event.issue.pull_request && github.event.comment.body == '/run-tests') }}
    runs-on: ubuntu-latest
    steps:
      - run: mkdir teste
      - run: echo "paulo" >> teste/testefile
      - name: Cache event
        uses: actions/cache@v4
        with:
          path: teste
          key: ${{ runner.os }}-${{ github.event.comment.id }}
    
      - name: View context attributes
        uses: actions/github-script@v7
        with:
          script: |
            console.log(context)
            console.log(github)
            console.log(github.reactions)
    
      - uses: actions/github-script@v7
        id: get-pr
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'eyes'
            }
            core.info(`Getting Comment #${request.comment_id} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.rest.reactions.createForIssueComment(request)
              return result.data
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }

      - uses: actions/github-script@v7
        id: reaction
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.rest.pulls.get(request)
              return result.data
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }

      - uses: actions/checkout@v4
        with:
          ref: ${{ fromJSON(steps.get-pr.outputs.result).head.ref }} # or .head.ref for branch name
          fetch-depth: 0

      - run: echo ${{ toJson(github.event.issue) }}
        continue-on-error: true

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4

      - run: |
          echo "ref ${{ fromJson(steps.get-pr.outputs.result).head.ref }}"
          echo "sha ${{ fromJson(steps.get-pr.outputs.result).head.sha }}"
          echo "oi"
          BASINHA=$(git merge-base origin/main ${{ fromJSON(steps.get-pr.outputs.result).head.ref }})
          echo "BASINHA: $BASINHA"
          HEADINHA=$(echo ${{ fromJSON(steps.get-pr.outputs.result).head.sha }})
          echo "HEADINHA: $HEADINHA"

      - run: |
          echo "BASE: ${{ env.NX_BASE }}"
          echo "HEAD: ${{ env.NX_HEAD }}"
